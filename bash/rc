#############################
# Source global definitions #
#############################

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi


#############
# Functions #
#############

/(){
  printf "\n"
  grep -rn --binary-file=without-match --color=always ${@:2} "$1" *
  printf "${@:2} $1"
  printf "\n"
}

https(){
  http --verify no $@
}
c="0"
mid="\[\e[${c}m\["$'\u23A2'"\[\e[0m\]"

get_git_branch(){
  # Based on: http://stackoverflow.com/a/13003854/170413
  local branch
  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
    if [[ "$branch" == "HEAD" ]]; then
      branc='detached* '
    fi
    symbol="\[\e[33m\]"$'\ue725'
    git_branch="$mid$symbol $branch\\n"
    #git_branch="($branch) "
  else
    git_branch=""
  fi
  echo $git_branch
}

get_python_virtual_env(){
    if [[ -n "$VIRTUAL_ENV" ]]; then
        venv_color="120;181;255"
        symbol="\[\e[38;2;${venv_color}m\]î˜† "
        virtual_env="$mid$symbol$(basename $VIRTUAL_ENV)\\n"
    else
        virtual_env=""
    fi
    echo $virtual_env
}

set_prompt(){
    venv_color="120;181;255"
    top="\[\e[${c}m\]"$'\u23A1'"\[\e[0m\]"
    bot="\[\e[${c}m\]"$'\u23A3'"\[\e[0m\]"
    folder="\[\e[38;2;200;119;0m\["$'\uf07b'" \[\e[0m\]"
    export PS1="\n${top}${folder}\w\n$(get_python_virtual_env)\[\e[33m\]$(get_git_branch)\[\e[0m\]${bot}\[\e[38;2;90;90;90m\]$\[\e[32m\]îŠ…\[\e[0m\] "
}

#######
# NVM #
#######

export NPM_TOKEN=""

export NVM_DIR="$HOME/.nvm"
# This loads nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  
# This loads nvm bash_completion
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  

#########
# Pyenv #
#########

export PYENV_ROOT="$HOME/.local/opt/pyenv"
export PIPENV_VENV_IN_PROJECT=1
PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    source "$(pyenv root)/completions/pyenv.bash"
fi

########
# ASDF #
########

. "$HOME/.local/opt/asdf/asdf.sh"
. "$HOME/.local/opt/asdf/completions/asdf.bash"

#############
# SSH-Agent #
#############

#SSH_ENV=/tmp/ssh_agent_control
   
## start the ssh-agent
#function start_agent {
#    echo "Initializing new SSH agent..."
#    # spawn ssh-agent
#    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
#    chmod 600 "${SSH_ENV}"
#    . "${SSH_ENV}" > /dev/null
#	/usr/bin/ssh-add
#    echo succeeded
#}
   
#if [ -f "${SSH_ENV}" ]; then
#     . "${SSH_ENV}" > /dev/null
#     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#        start_agent;
#    }
#else
#    start_agent;
#fi

###########
# Kubectl #
###########

source <(kubectl completion bash)

######
# Go #
######

export GOROOT="$HOME/.local/opt/go"
export GOPATH="$HOME/go"
PATH="$GOROOT/bin:$GOPATH/bin:$PATH"

##########
# Prompt #
##########
export VIRTUAL_ENV_DISABLE_PROMPT=1
PROMPT_COMMAND="set_prompt"

##########
# Direnv #
##########

eval "$(direnv hook bash)"

###########
# Exports #
###########

PATH="$HOME/.local/bin:$PATH"
export PATH

XDG_CONFIG_HOME="$HOME/.config"
export XDG_CONFIG_HOME

# I know makes no sense but without this gpg does not quite works...
GPG_TTY=$(tty)
export GPG_TTY

eval "$(pyenv init --path)"

export EDITOR=nvim

alias dots='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME/.config'
alias ls='ls --color'

alias unlock='eval $(op signin)'
export OP_SESSION_my="zxqtxkmIImDtcsfwspi6IDvzCoQEG88kUTXkDUbdpgA"

########################
# Load x and AwesomeWM #
########################

if [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]]; then
  exec startx ~/.config/X11/xinitrc
fi

